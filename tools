{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPxRSINdniuXQnHzCKkY/JR"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import datetime\n",
        "from sqlalchemy import create_engine, text\n",
        "from sqlalchemy.orm import sessionmaker\n",
        "from flask import jsonify\n",
        "import requests\n",
        "import uuid\n",
        "\n",
        "# Konfigurasi database\n",
        "engine = create_engine('sqlite:///social_mediaHack.db')\n",
        "Session = sessionmaker(bind=engine)  # Rename sessionmaker to Session\n",
        "\n",
        "def get_db_connection():\n",
        "    return engine\n",
        "\n",
        "def open_app():\n",
        "    with Session() as session: # Use Session() to create a session instance\n",
        "        try:\n",
        "            conn = get_db_connection()\n",
        "            conn.commit()\n",
        "            conn.close()\n",
        "        except Exception as e:\n",
        "            print(f\"Error connecting to database: {e}\")\n",
        "\n",
        "def close_app():\n",
        "    if hasattr(session, 'session'):\n",
        "        session.close()\n",
        "\n",
        "def handle_user_input():\n",
        "    while True:\n",
        "        try:\n",
        "            # Mencapai tampilan window input\n",
        "            user_input = input(\"Ketahui bagaimana Anda akan mengubah ini? (1) Mengubah akun, (2) Menyimpan status akun, (3) Membuat handle dummy)\\n\"\n",
        "                            f\"Masukkan pilihan: {input()}\")\n",
        "\n",
        "            if user_input == '1':\n",
        "                # Fungsi untuk mengubah akun\n",
        "                username = input(\"Ketik nama akun yang baru akan dibuat: \")\n",
        "                email = input(\"Nama email yang baru akan dibuat: \")\n",
        "\n",
        "                # Membuat record akun\n",
        "                new_account = {\n",
        "                    'id': str(uuid4()),\n",
        "                    'username': username,\n",
        "                    'email': email,\n",
        "                    'created_at': datetime.datetime.now().isoformat(),\n",
        "                    'updated_at': datetime.datetime.now().isoformat()\n",
        "                }\n",
        "\n",
        "                if conn := session.get('users', default=new_account):\n",
        "                    conn.update(new_account)\n",
        "                else:\n",
        "                    conn = session(new_account)\n",
        "                    conn.commit()\n",
        "\n",
        "                print(\"Akun berhasil dibuat. Pastikan nama dan email sudah sesuai dengan yang sudah ada.\")\n",
        "            elif user_input == '2':\n",
        "                # Fungsi untuk menyimpan status akun\n",
        "                handle_user_input_status()\n",
        "                print(\"Status akun berhasil disimpan\")\n",
        "            elif user_input == '3' and session:\n",
        "                account = session.query(User).filter_by(user_id=session.current_user().id).first()\n",
        "                if not account:\n",
        "                    print(\"Tidak ada akun yang sedang dibuat handle dummy.\")\n",
        "                else:\n",
        "                    new_handle = {\n",
        "                        'id': str(uuid4()),\n",
        "                        'username': account.username,\n",
        "                        'email': account.email,\n",
        "                        'created_at': datetime.datetime.now().isoformat(),\n",
        "                        'updated_at': datetime.datetime.now().isoformat()\n",
        "                    }\n",
        "\n",
        "                    if conn := session.get('handles', default=new_handle):\n",
        "                        conn.update(new_handle)\n",
        "                    else:\n",
        "                        conn = session(new_handle)\n",
        "                        conn.commit()\n",
        "                    print(\"Handle dummy berhasil dibuat. Pastikan nama dan email sudah sesuai dengan yang sudah ada.\")\n",
        "            break\n",
        "        except Exception as e:\n",
        "            print(f\"Error during handling: {e}\")\n",
        "\n",
        "def handle_user_input_status():\n",
        "    while True:\n",
        "        try:\n",
        "            # Mencapai tampilan window status akun\n",
        "            user_input = input(\"Ketahui bagaimana Anda akan menampilkan informasi status akun? (1) Menampilkan list, (2) Menginput nama akun, (3) Menginput email akun, (4) Mengecek apakah ada handle dummy)\\n\"\n",
        "                            f\"Masukkan pilihan: {input()}\")\n",
        "\n",
        "            if user_input == '1':\n",
        "                # Fungsi untuk menampilkan list status akun\n",
        "                handle_status_list()\n",
        "                print(\"Status akun berhasil ditampilkan\")\n",
        "            elif user_input == '2' and session:\n",
        "                account_id = input(\"Nama akun yang akan ditampilkan: \")\n",
        "\n",
        "                try:\n",
        "                    account = session.query(User).filter_by(user_id=account_id, except_on='username').first()\n",
        "                    if account:\n",
        "                        handle_status_list(account.id)\n",
        "                        print(f\"Status akun {account.id} berhasil ditampilkan\")\n",
        "                    else:\n",
        "                        print(\"Tidak ada akun yang ditampilkan.\")\n",
        "                except Exception as e:\n",
        "                    print(f\"Error during handling: {e}\")\n",
        "            elif user_input == '3' and session:\n",
        "                handle_status_list(session.current_user().id)\n",
        "                print(\"Status akun berhasil ditampilkan\")\n",
        "            elif user_input == '4':\n",
        "                if not account:\n",
        "                    handle_status_list(0)\n",
        "                    print(\"Tidak ada handle dummy yang dibuat.\")\n",
        "                else:\n",
        "                    break\n",
        "            break\n",
        "        except Exception as e:\n",
        "            print(f\"Error during handling: {e}\")\n",
        "\n",
        "def handle_status_list(account_id):\n",
        "    try:\n",
        "        # Fungsi untuk menampilkan daftar status akun\n",
        "        account = session.query(User).filter_by(user_id=account_id, except_on='username').first()\n",
        "        if account:\n",
        "            users = session.query(User).all()\n",
        "            data = []\n",
        "            for user in users:\n",
        "                data.append({\n",
        "                    'id': str(user.id),\n",
        "                    'name': user.username,\n",
        "                    'email': user.email,\n",
        "                    'created_at': datetime.datetime.now().isoformat(),\n",
        "                    'updated_at': datetime.datetime.now().isoformat()\n",
        "                })\n",
        "\n",
        "            response = jsonify(data)\n",
        "            close_app()\n",
        "            print(response)\n",
        "        else:\n",
        "            print(\"Tidak ada akun yang ditampilkan\")\n",
        "    except Exception as e:\n",
        "        print(f\"Error during handling: {e}\")\n",
        "\n",
        "def main():\n",
        "    open_app()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ShfD4xhWnVX6",
        "outputId": "9ff7e85b-7db8-4a19-a08a-87288b568ecb"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error connecting to database: 'Engine' object has no attribute 'commit'\n"
          ]
        }
      ]
    }
  ]
}